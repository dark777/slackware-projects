1) Instalando e configurando o banco de dados postgresSQL.

1-1ª) Passo - Instale o pacote SBo.

bash-4.4$ su -c "installpkg postgresql-9.6.3-x86_64-1_SBo.tgz"


1-2ª) Passo - Crie um usuário postgres:

bash-4.4$ su -c "useradd postgres -s /bin/bash -d /var/lib/pgsql"


1-3ª) Passo - Diga quem é o dono de /var/lib/pgsql recursivamente:

bash-4.4$ su -c "chown -R postgres.postgres /var/lib/pgsql/"


1-4ª) Passo - Crie uma senha para o usuário postgres:

bash-4.4$ su -c "passwd postgres"
Senha : <senha de root>

Nova senha : <suasenha postgres>


1-5ª) Passo - Inicialize o tablespace do banco de dados.
Somente o usuário postgres deve executar um destes comandos:

bash-4.4$ su postgres -c '/usr/bin/initdb -D /var/lib/pgsql/9.6/data'
ou
bash-4.4$ su postgres -c '/usr/bin/initdb -D /var/lib/pgsql/9.6/data --locale=en_US.UTF-8 -A md5 -W --data-checksums'


1-6ª) Passo - Inicie o servidor de banco de dados.
O usuário postgres também deve executar um destes comandos:

bash-4.4$ su - postgres -c '/usr/bin/pg_ctl -D /var/lib/pgsql/9.6/data -l logfile start'
ou
bash-4.4$ su - postgres -c '/usr/bin/postmaster -D /var/lib/pgsql/9.6/data > /var/lib/pgsql/9.6/data/logfile 2>&1 &'


1-7ª) Passo - Daremos permissao de execução a rc.postgresql:

bash-4.4$ su -c "chmod 755 /etc/rc.d/rc.postgresql"


1-8ª) Passo - Iniciando o server postgresql:

bash-4.4$ su -c "/etc/rc.d/rc.postgresql start"


1-9ª) Passo - Logaremos agora no postgres para entrar-mos,
no terminal de comandos pgsql:

bash-4.4$ su postgres
Senha : <suasenha postgres>


postgres$ psql


1-10ª) Passo - Vamos criar um super usuário chamado darkstar no postgres:

postgres=# create user darkstar superuser inherit createdb createrole;
CREATE ROLE


1-11ª) Passo - vamos criar uma senha encriptada para o super usuário darkstar:

postgres=# alter user darkstar with encrypted password 'minhasenha';
ALTER ROLE


Outras formas de criar um usuário:

Sem encriptação de senha:

postgres=# create user darkstar with password 'minhasenha';


Com encriptação de senha:

postgres=# create user darkstar with encrypted password 'minhasenha';


Criando super usuario sem senha encryptda:

postgres=# create user darkstar password 'minhasenha' superuser inherit createdb createrole;
CREATE ROLE


Criando super usuario com senha encryptda:

postgres=# create user darkstar with encrypted password 'minhasenha' superuser inherit createdb createrole;
CREATE ROLE


Criando usuario comun com senha encryptda:

postgres=# create user darkstar with encrypted password 'minhasenha' createdb createrole;
CREATE ROLE


Defineindo direito de acesso ao novo usuário:

postgres$ psql darkstar


postgres=# grant all privileges on database <dbname> to darkstar;
GRANT

Logue no psql para criar a senha do usuário:

postgres$ psql

postgres=# \password darkstar
Enter new password:
Enter it again:


Deletando usuario:

postgres=# drop role darkstar;
DROP ROLE

Criando usuario sem logar no psql:

postgres$ createuser darkstar
Password: <senha do psql>

##################################################################################################

2) Fazendo importação e exportação de arquivos TXT's,
correspondentes a uma tabela para PostgreSQL.


Os dados do arquivo cadastros.txt serão os dados abaixo:

01; Boi Preto; 2000-02-29
02; Sol Nascente; 2009-10-01
03; Parque Belo; 2007-03-15
04; Pedra Bonita; 2001-08-25
05; Nossa Senhora; 2011-06-22


2-1ª) Passo - Vamos criar o arquivo cadastros.txt em /tmp:

Digite a seguinte linha abaixo abrindo aspas,
com o su e pressione ENTER e depois que apareceu >
copie e cole o conteúdo acima que será importado para o banco de dados teste
depois de copiado pressione ENTER e digite EOF,
pressione ENTER novamente e feche as aspas,
pressione ENTER novamente para digitar a senha e o arquivo cadastros.txt,
será criado em /tmp.

bash-4.4$ su -c "cat >/tmp/cadastros.txt<<EOF
> 01; Boi Preto; 2000-02-29
> 02; Sol Nascente; 2009-10-01
> 03; Parque Belo; 2007-03-15
> 04; Pedra Bonita; 2001-08-25
> 05; Nossa Senhora; 2011-06-22
> EOF
> "
Senha : 


2-2ª) Passo - Se você ja tem instalado o postgres no seu slackware,
vamos ativar o mesmo, ou então execute os, passos de instalação e configuração
na sesão 1 de 1.1 a 1.11:


2-3ª) Passo - Iniciando o server postgresql:

bash-4.4$ su -c "/etc/rc.d/rc.postgresql start"


2-4ª) Passo - Vamos logar no usuário postgres:

bash-4.4$ su postgres
Senha : <suasenha postgres>


2-5ª) Passo - Entraremos no terminal de comandos pgsql,
para criar o banco de dados teste anexado ao usuário darkstar:

postgres$ psql

postgres=# create database teste owner darkstar encoding 'UTF8';
CREATE DATABASE

Listando databases:

postgres=# \l

ou

postgres=# select * from pg_database;



2-6ª) Passo - Logando no banco de dados teste com o usuário darkstar:

postgres=# \c teste darkstar;
You are now connected to database "teste" as user "darkstar".


2-7ª) Passo - Agora dentro do banco de dados teste,
vamos criar uma tabela chamada cadastros,
com campo, primary key não serial(auto_increment):


Listando Tabelas:

teste=# \dt
No relations found


teste=# create table cadastros( \
id_faz int not null unique primary key, \
nome_faz varchar(25) not null, \
data_compra date not null \
);
CREATE TABLE


teste=# \dt
           List of relations
 Schema |   Name    | Type  |  Owner   
--------+-----------+-------+----------
 public | cadastros | table | darkstar
(1 row)


No PgadminIII crie a tabela da seguinte forma:

create table cadastros
(
 id_faz int not null unique primary key,

 nome_faz varchar(25) not null,

 data_compra date not null
);


2-8ª) Passo - Importando cadastros.txt em tabela com campo,
primary key não serial(auto_increment):

2-8.1ª) Passo - Comando de importacao do arquivo /tmp/exportacao.txt:

teste=# copy cadastros from '/tmp/cadastros.txt' using delimiters ';';
COPY 4

teste=# select * from cadastros;
 id_faz |   nome_faz   | data_compra 
--------+--------------+-------------
      1 | Sol Nascente | 2009-10-01
      2 | Parque Belo  | 2007-03-15
      3 | Pedra Bonita | 2001-08-25
      4 | Medeiros     | 2011-06-22
(4 rows)


2-8.2ª) Passo - Se você criou um arquivo em csv movendo para /tmp.
Comando de importacao do arquivo /tmp/exportacao.csv:

teste=# copy cadastros from '/tmp/cadastros.csv' using delimiters ';' CSV HEADER;
COPY 4

teste=# select * from cadastros;
 id_faz |   nome_faz   | data_compra 
--------+--------------+-------------
      1 | Sol Nascente | 2009-10-01
      2 | Parque Belo  | 2007-03-15
      3 | Pedra Bonita | 2001-08-25
      4 | Medeiros     | 2011-06-22
(4 rows)


2-9ª) Passo - Agora vamos exportar sem os ID's,
para usarmos em uma tabela com campo,
primary key definido como serial(auto_increment):


2-9.1ª) Passo - Comando de exportação da tabela cadastros para /tmp/exportacao.txt:

teste=# copy cadastros(nome_faz,data_compra) to '/tmp/exportacao.txt' using delimiters ';';


2-9.2ª) Passo - Comando de exportação da tabela cadastros para /tmp/exportacao.csv

teste=# copy cadastros(nome_faz,data_compra) to '/tmp/exportacao.csv' using delimiters ';' CSV HEADER;


2-9.3ª) Passo - Os dois comandos acima exporta os dados da tabela cadastros,
sem os id's, então nosso arquivo em  /tmp/exportacao.txt
ficara assim como este abaixo, note que em nao precisamos de delimitadores ";",
antes do campo nome, isso por que o comando copy é mais eficiente no postgres:
 
bash-4.4$ cat /tmp/exportacao.txt
Sol Nascente; 2009-10-01
Parque Belo; 2007-03-15
Pedra Bonita; 2001-08-25
Medeiros; 2011-06-22


2-9.4ª) Passo - Vamos deletar nossa tabela cadastros,
para recriar novamente mas com serial(auto_increment).

teste=# drop table cadastros;
DROP TABLE


2-9.5ª) Passo - Recriando a tabela cadastros com serial(auto_increment):

teste=# create table cadastros( \
id_faz serial primary key not null, \
nome_faz varchar(25) not null, \
data_compra date not null \
);
CREATE TABLE


No PgadminIII crie a tabela da seguinte forma:

create table cadastros
(
 id_faz serial primary key not null,
 
 nome_faz varchar(25) not null,
 
 data_compra date not null
);


Caso necessite exportar uma tabela com todos os campos faça:
teste=# copy cadastros to '/tmp/exportacao.txt' using delimiters ';';


2-10ª) Passo - Importando o arquivo exportacao.txt em tabela com campo serial.
Os dados do arquivo /tmp/exportacao.txt serão,
os dados da sessão 2 passo 9-3ª do comando cat.


2-10.1ª) Passo - Comando de importacao do arquivo /tmp/exportacao.txt:

teste=# copy cadastros(nome_faz,data_compra) from '/tmp/exportacao.txt' using delimiters ';';
COPY 4

teste=# select * from cadastros;
 id_faz |   nome_faz   | data_compra 
--------+--------------+-------------
      1 | Sol Nascente | 2009-10-01
      2 | Parque Belo  | 2007-03-15
      3 | Pedra Bonita | 2001-08-25
      4 | Medeiros     | 2011-06-22
(4 rows)


2-10.2ª) Passo - Comando de importacao para exportacao.csv

teste=# copy cadastros(nome_faz,data_compra) from '/tmp/exportacao.csv' using delimiters ';' CSV HEADER;
COPY 4

teste=# select * from cadastros;
 id_faz |   nome_faz   | data_compra 
--------+--------------+-------------
      1 | Sol Nascente | 2009-10-01
      2 | Parque Belo  | 2007-03-15
      3 | Pedra Bonita | 2001-08-25
      4 | Medeiros     | 2011-06-22
(4 rows)

##################################################################################################

Outros comandos úteis.

Criando usuário normal no postgres:

postgres=# create user dark encrypted password 'testes' createdb;
CREATE ROLE

Logando em um banco pelo usuário postgres,
usando o usuário darkstar para logar no banco teste:

postgres$ psql -U darkstar -d teste

postgres$ psql -h localhost -d teste

postgres$ psql -d teste -U darkstar -W

postgres$ psql -h localhost -U darkstar -d teste -p 5432

postgres$ psql --command="select *from cadastros" --host=localhost --port=5432 --username=darkstar --dbname=teste


Logando em um banco sem o usuário postgres,
usando o usuário darkstar para logar no banco teste:

bash-4.4$ su -c "psql -d teste -U darkstar -W"

bash-4.4$ su -c "psql -h localhost -U darkstar -d teste -p 5432"

bash-4.4$ su -c 'psql --host=localhost --port=5432 --username=darkstar --password --dbname=teste'

bash-4.4$ su -c 'psql --command="select *from cadastros" --host=localhost --port=5432 --username=darkstar --dbname=teste'

bash-4.4$ su - postgres -c 'psql --host=localhost --port=5432 --username=darkstar --password --dbname=teste'

bash-4.4$ su -c 'psql --command="select *from cadastros" --host=localhost --port=5432 --username=darkstar --dbname=teste'

bash-4.4$ su - postgres -c 'psql --command="select *from cadastros" --host=localhost --port=5432 --username=darkstar --dbname=teste'


Backup do banco como "plain":

bash-4.4$ su -c 'pg_dump -h localhost -p 5432 -U postgres teste > "/tmp/backup.sql"'


Backup de uma tabela especifica:

bash-4.4$ su -c 'pg_dump -h localhost -t cadastros -p 5432 -U postgres teste > "/tmp/backup_cadastros.sql"'

Gerar e restaurar backup de apenas uma tabela Postgres

Gerar backup
bash-4.4$ pg_dump –host localhost –port 5432 –username "postgres" –format custom –verbose –file "/home/backup_tabela.backup" –table "NOME_SCHEMA.NOME_TABELA" "NOME_BASE"

Restaurar:

bash-4.4$ pg_restore –host localhost –port 5432 –username "postgres" –dbname "NOME_BASE" –data-only –jobs 4 –table NOME_TABELA –schema public –verbose "/home/backup_tabela.backup"


Backup de duas tabelas especifica:

bash-4.4$ su -c 'pg_dump -h localhost -t cadastros -t compradores -port 5432 -U darkstar teste > "/tmp/backup_duas_tabelas.sql"'


Backup da estrutura de algumas tabelas em uma máquina remota:

bash-4.4$ su -c 'pg_dump -t TABELA1 -t TABELA2 -f /tmp/backup/backup.sql -s -h IP_DA_MAQUINA_REMOTA -U darkstar DBNAME'

ps: O parâmetro"-s" é "schema only".


Restaurar backup criado como "plain":

bash-4.4$ su -c 'psql -U darkstar -h localhost teste < "/tmp/backup.sql"'


Restaurar backup criado como "plain" que não esteja na porta padrão do postgres (5432):

bash-4.4$ su -c 'psql -U darkstar -h localhost -p 5432 teste < "/tmp/backup.sql"'


Deletando o banco de dados:

postgres=# drop database teste;
ERROR:  database "teste" does not exist

postgres=# drop database if exists teste;
NOTICE:  database "teste" does not exist, skipping
DROP DATABASE


Sources:
http://ribafs.org/portal/index.php
https://github.com/ribafs?tab=repositories
http://pgdocptbr.sourceforge.net/pg80/backup.html
https://gist.github.com/acdesantana/1019606
https://makandracards.com/zeroglosa/27675-gerar-e-restaurar-backup-de-apenas-uma-tabela-postgres
https://makandracards.com/zeroglosa/13091-limpar-base-de-dados-sem-fazer-drop-postgresql
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.CreatingConnecting.PostgreSQL.html
https://pt.wikibooks.org/wiki/PostgreSQL_Prático/DCL/Administração_de_usuários,_grupos_e_privilégios
https://pt.wikibooks.org/wiki/PostgreSQL_Prático/Ferramentas/psql
https://pt.stackoverflow.com/questions/184562/executar-comando-sql-no-terminal
https://devblog.drall.com.br/criar-usuario-no-banco-de-dados-postgresql-via-psql
http://www.andersonmedeiros.com/criacao-de-usuarios-postgresql/
https://www.vivaolinux.com.br/artigo/psql-Conheca-o-basico
https://www.1keydata.com/pt/sql/sql-create-table.php